[{"/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/reportWebVitals.js":"1","/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/index.js":"2","/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/App.js":"3","/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/Login.js":"4","/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/ChatRoom.js":"5"},{"size":362,"mtime":1606687091235,"results":"6","hashOfConfig":"7"},{"size":794,"mtime":1606705110411,"results":"8","hashOfConfig":"7"},{"size":528,"mtime":1606687091235,"results":"9","hashOfConfig":"7"},{"size":6304,"mtime":1606705300693,"results":"10","hashOfConfig":"7"},{"size":16900,"mtime":1606705384158,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k3h4qf",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/reportWebVitals.js",[],"/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/index.js",["24"],"/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/App.js",[],["25","26"],"/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/Login.js",["27","28"],"/home/dan/Documents/prueba_useit/mini_chat_grupal/frontend/mini_chat/src/ChatRoom.js",["29","30","31","32","33","34","35","36","37","38","39","40","41","42"],"import React, { Component } from 'react';\nimport ReactDOM, { unmountComponentAtNode } from 'react-dom';\nimport styles from './ChatRoom.module.css';\nlet roomId = 'undefined';\nlet imgB64String = '';\n\nexport default class ChatRoom extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.rootRef = React.createRef();\n\t}\n\trender () {\n\t\treturn(\n\t\t\t<div ref={this.rootRef}>\n\t\t\t\t<div className={ styles.profile }>\n\t\t\t\t\t<h2></h2>\n\t\t\t\t\t<img></img>\n\t\t\t\t\t<button>save pic</button>\n\t\t\t\t</div>\n\t\t\t\t<div className={ styles.side_bar }>\n\t\t\t\t\t<div className={ styles.profile_pic }>\n\t\t\t\t\t\t<img></img>\n\t\t\t\t\t\t<div className={ styles.change_photo }>\n\t\t\t\t\t\t\t<input type=\"file\"></input>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={ styles.profile_name }>\n\t\t\t\t\t\t<h1>username</h1>\n\t\t\t\t\t\t<input type=\"text\"></input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={ styles.room_name }>\n\t\t\t\t\t\t<h1></h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={ styles.change_room }>\n\t\t\t\t\t\t<h1>change room</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<h2 className={ styles.logout }>Logout</h2>\n\t\t\t\t\t<h2 className={ styles.account }>Account</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className={ styles.rooms }>\n\t\t\t\t\t<h1>Active Rooms</h1>\n\t\t\t\t\t<ul>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div className={ styles.users }>\n\t\t\t\t\t<h1>Users</h1>\n\t\t\t\t\t<ul>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<div className={ styles.chat }>\n\t\t\t\t\t<ul className={ styles.messages }>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div className={ styles.uploader }>\n\t\t\t\t\t\t<h2></h2>\n\t\t\t\t\t\t<img></img>\n\t\t\t\t\t\t<button></button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={ styles.doodle_attribution }>\n\t\t\t\t\t\t<a href=\"https://www.vecteezy.com/free-vector/pattern\" target=\"_blank\">Pattern Vectors by Vecteezy</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={ styles.edit_container }>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<input type=\"file\" accept=\".png,.jpg\"></input>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<textarea name=\"\" cols=\"30\" rows=\"10\" placeholder=\"Write a new message\"></textarea>\n\t\t\t\t\t\t<button></button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\tasync componentDidMount () {\n\t\tconst comp = this;\n\t\tconst root = comp.rootRef.current;\n\t\tconsole.log(this, comp);\n\t\troot.querySelector(`.${styles.profile_name} h1`).innerHTML = localStorage.getItem('username');\n\t\tconst logout = root.querySelector(`.${styles.logout}`);\n\t\tlogout.addEventListener('click', function () {\n\t\t\tlocalStorage.removeItem('token');\n\t\t\tlocalStorage.removeItem('user_id');\n\t\t\tlocalStorage.removeItem('username');\n\t\t\twindow.location.replace('/');\n\t\t});\n\t\tconst changeRoom = root.querySelector(`.${styles.change_room}`);\n\t\tconst nameRoom = root.querySelector(`.${styles.room_name}`);\n\t\tchangeRoom.addEventListener('click', async function () {\n\t\t\tcomp.renderRooms(await comp.getRooms());\n\t\t\troot.querySelector(`.${styles.users}`).style.display = 'none';\n\t\t\troot.querySelector(`.${styles.chat}`).style.display = 'none';\n\t\t\tchangeRoom.style.display = 'none';\n\t\t\tnameRoom.style.display = 'none';\n\t\t});\n\t\tcomp.setRoomsListeners();\n\t\tconst editor = root.querySelector(`.${styles.edit_container}`);\n\t\teditor.querySelector('button').addEventListener('click', async function () {\n\t\t\tconst messageInput = editor.querySelector('textarea');\n\t\t\tconsole.log(messageInput.value);\n\t\t\tconsole.log('Send message');\n\t\t\tif (messageInput.value !== '') {\n\t\t\t\tawait comp.sendMessage(messageInput.value);\n\t\t\t\tmessageInput.value = '';\n\t\t\t}\n\t\t});\n\t\teditor.querySelector('div').addEventListener('click', function (evn) {\n\t\t\teditor.querySelector('input').click();\n\t\t});\n\t\teditor.querySelector('input').addEventListener('change', function (evn) {\n\t\t\tif (evn.target.files && evn.target.files.length > 0) {\n\t\t\t\tconst file = evn.target.files[0];\n\t\t\t\tcomp.renderImageUploader(file, root.querySelector(`.${styles.uploader} img`));\n\t\t\t}\n\t\t\tevn.target.value = '';\n\t\t\troot.querySelector(`.${styles.uploader}`).style.display = 'block';\n\t\t});\n\t\troot.querySelector(`.${styles.uploader} h2`).addEventListener('click', function () {\n\t\t\troot.querySelector(`.${styles.uploader }`).style.display = 'none';\n\t\t});\n\t\troot.querySelector(`.${styles.uploader} button`).addEventListener('click', async function (evn) {\n\t\t\tconsole.log('uploade image');\n\t\t\tawait comp.uploadImage('message');\n\t\t\t// console.log(roomId);\n\t\t\tcomp.loadMessages();\n\t\t\troot.querySelector(`.${styles.uploader}`).style.display = 'none';\n\t\t});\n\t\tconst profilePic = root.querySelector(`.${styles.profile_pic}`);\n\t\tprofilePic.addEventListener('mousemove', function () {\n\t\t\tprofilePic.querySelector(`.${styles.change_photo}`).style.display = 'block';\n\t\t});\n\t\tprofilePic.addEventListener('mouseleave', function () {\n\t\t\tprofilePic.querySelector(`.${styles.change_photo}`).style.display = 'none';\n\t\t});\n\t\tprofilePic.querySelector(`.${styles.change_photo}`).addEventListener('click', function () {\n\t\t\tprofilePic.querySelector(`.${styles.change_photo} input`).click();\n\t\t});\n\t\tprofilePic.querySelector(`.${styles.change_photo} input`).addEventListener('change', function (evn) {\n\t\t\tif (evn.target.files && evn.target.files.length > 0) {\n\t\t\t\tconst file = evn.target.files[0];\n\t\t\t\tcomp.renderImageUploader(file, root.querySelector(`.${styles.profile} img`));\n\t\t\t}\n\t\t\tevn.target.value = '';\n\t\t\troot.querySelector(`.${styles.profile}`).style.display = 'block';\n\t\t});\n\t\troot.querySelector(`.${styles.profile} h2`).addEventListener('click', function () {\n\t\t\troot.querySelector(`.${styles.profile}`).style.display = 'none';\n\t\t});\n\t\troot.querySelector(`.${styles.profile} button`).addEventListener('click', async function (evn) {\n\t\t\tconsole.log('uploade image');\n\t\t\tawait comp.uploadImage('profile');\n\t\t\tcomp.fetchMedia('profile', {\n\t\t\t\tobject: profilePic.querySelector('img'),\n\t\t\t\tid: 0\n\t\t\t})\n\t\t\tif (roomId !== 'undefined') {\n\t\t\t\tawait comp.getUsers(roomId);\n\t\t\t}\n\t\t\troot.querySelector(`.${styles.profile}`).style.display = 'none';\n\t\t});\n\t\t// comp.fetchMedia('profile', {\n\t\t// \tobject: profilePic.querySelector('img'),\n\t\t// \tid: 0\n\t\t// });\n\t\tconst profileName = root.querySelector(`.${styles.profile_name}`);\n\t\tprofileName.querySelector('h1').addEventListener('click', function (evn) {\n\t\t\tprofileName.querySelector('input').style.display = 'block';\n\t\t\tprofileName.querySelector('input').value = evn.target.innerHTML;\n\t\t\tprofileName.querySelector('input').focus();\n\t\t});\n\t\tprofileName.querySelector('input').addEventListener('keypress', async function (evn) {\n\t\t\tif (evn.keyCode === 13) {\n\t\t\t\tawait comp.saveUsername(evn.target.value)\n\t\t\t\tconsole.log('save username: ', evn.target.value);\n\t\t\t\tevn.target.style.display = 'none';\n\t\t\t\tprofileName.querySelector('h1').innerHTML = evn.target.value;\n\t\t\t\tif (roomId != 'undefined') {\n\t\t\t\t\tawait comp.getUsers(roomId);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t\tprofileName.querySelector('input').addEventListener('focusout', async function (evn) {\n\t\t\tevn.target.style.display = 'none';\n\t\t\tprofileName.querySelector('h1').innerHTML = evn.target.value;\n\t\t\tawait comp.saveUsername(evn.target.value)\n\t\t});\n\t\tthis.renderRooms(await this.getRooms());\n\t\tthis.setRoomsListeners();\n\t}\n\tasync getRooms () {\n\t\tconst comp = this;\n\t\tconsole.log('getRooms');\n\t\tconst req = await fetch(\n\t\t\t`${process.env.REACT_APP_API_URL}/rooms`,\n\t\t\t{\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tif (req.status === 200) {\n\t\t\tconst res = await req.json();\n\t\t\tconsole.log(res);\n\t\t\treturn res.rooms;\n\t\t} else {\n\t\t\tconsole.log(req);\n\t\t\treturn {};\n\t\t}\n\t}\n\tsetRoomsListeners () {\n\t\tconst root = this.rootRef.current;\n\t\tconst comp = this;\n\t\tconst rooms = root.querySelectorAll(`.${styles.rooms} li`);\n\t\tfor (const room of rooms) {\n\t\t\troom.addEventListener('click', function (evn) {\n\t\t\t\tcomp.renderRoom(evn.target.getAttribute('room_id'), evn.target.innerHTML);\n\t\t\t});\n\t\t}\n\t}\n\tasync renderRooms (rooms) {\n\t\tconst root = this.rootRef.current;\n\t\tconst comp = this;\n\t\tconsole.log(rooms);\n\t\tconst roomsEl = root.querySelector(`.${styles.rooms}`);\n\t\tconst ul = roomsEl.querySelector('ul');\n\t\tul.innerHTML = '';\n\t\tfor (const room of rooms) {\n\t\t\tconst li = document.createElement('li');\n\t\t\tli.setAttribute('room_id', room.id);\n\t\t\tli.innerHTML = room.name;\n\t\t\tul.appendChild(li);\n\t\t}\n\t\troomsEl.style.display = 'block';\n\t\tcomp.setRoomsListeners();\n\t}\n\tasync renderRoom (id, name) {\n\t\tconst root = this.rootRef.current;\n\t\troomId = id;\n\t\tconst changeRoom = root.querySelector(`.${styles.change_room}`);\n\t\tchangeRoom.style.display = 'block';\n\t\tconst nameRoom = root.querySelector(`.${styles.room_name}`);\n\t\tnameRoom.style.display = 'block';\n\t\tconsole.log('Render room');\n\t\tconsole.log(name)\n\t\troot.querySelector(`.${styles.room_name} h1`).innerHTML = name;\n\t\troot.querySelector(`.${styles.rooms}`).style.display = 'none';\n\t\tconsole.log(id);\n\t\tawait this.getUsers(id);\n\t\troot.querySelector(`.${styles.chat}`).style.display = 'block';\n\t\tawait this.loadMessages();\n\t}\n\tasync loadMessages () {\n\t\tconst req = await fetch(\n\t\t\t`${process.env.REACT_APP_API_URL}/rooms/${roomId}/messages/all/`,\n\t\t\t{\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tif (req.status === 200) {\n\t\t\tconsole.log(req.status);\n\t\t\tconst res = await req.json();\n\t\t\tthis.renderMessages(res.messages, res.id);\n\t\t\tconsole.log(res);\n\t\t} else {\n\t\t\tthis.renderMessages([], localStorage.getItem('user_id'));\n\t\t}\n\t\t\n\t}\n\n\tasync getUsers (id) {\n\t\tconsole.log(id);\n\t\tconst req = await fetch(\n\t\t\t`${process.env.REACT_APP_API_URL}/rooms/${id}/users`,\n\t\t\t{\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tconst res = await req.json();\n\t\tconsole.log(res);\n\t\tthis.rootRef.current.querySelector(`.${styles.users}`).style.display = 'block';\n\t\tthis.renderUsers(res.users);\n\t}\n\trenderUsers (users) {\n\t\tconst root = this.rootRef.current;\n\t\tconst cont = root.querySelector(`.${styles.users} ul`);\n\t\tcont.innerHTML = '';\n\t\tfor (const user of users) {\n\t\t\tconst li = document.createElement('li');\n\t\t\tconst time = `${user.last_login.split('T')[1].split('.')[0]}`;\n\t\t\tconst date = `${user.last_login.split('T')[0]}`;\n\t\t\tli.innerHTML = `<img><h1>${user.username}</h1><h2>Last login: ${time} / ${date}</h2>`;\n\t\t\tcont.appendChild(li);\n\t\t\tthis.fetchMedia('profile', {\n\t\t\t\tobject: li.querySelector('img'),\n\t\t\t\tid: user.id\n\t\t\t})\n\t\t}\n\t}\n\tasync fetchMedia (type, obj) {\n\t\tconst req = await fetch(\n\t\t\t`${process.env.REACT_APP_API_URL}/media/${obj.id}?type=${type}`,\n\t\t\t{\n\t\t\t\tmethod: 'GET',\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tconst res = await req.blob();\n\t\tobj.object.src = window.URL.createObjectURL(res);\n\t\t// console.log(res);\n\t}\n\tasync renderMessages (messages, id) {\n\t\tconst comp = this;\n\t\tconst root = this.rootRef.current;\n\t\tconst ul = root.querySelector(`.${styles.messages}`);\n\t\tul.innerHTML = '';\n\t\tconst first = document.createElement('li');\n\t\tfirst.innerHTML = '<h1>Welcome and Hi!!, start talking with your peers</h1>';\n\t\tfirst.classList.add(styles.first);\n\t\tul.appendChild(first);\n\t\tfor (const message of messages) {\n\t\t\tconst mId = message.id;\n\t\t\tconst li = document.createElement('li');\n\t\t\tlet menu = '';\n\t\t\tlet mine = '';\n\t\t\tlet owner = message.user\n\t\t\tif (id === message.user_id) {\n\t\t\t\tli.classList.add(styles.mine);\n\t\t\t\towner = 'me'\n\t\t\t\tmenu = `\n\t\t\t\t\t\t<div option=\"delete\"></div>\n\t\t\t\t\t\t<div menu=\"message\">\n\t\t\t\t\t\t\t<h1></h1>\n\t\t\t\t\t\t\t<h2 user_id=\"${id}\">Delete Message</h2>\n\t\t\t\t\t\t</div>`;\n\t\t\t\tmine = 'mine';\n\t\t\t}\n\t\t\tlet media = '';\n\t\t\tif (message.media) {\n\t\t\t\tmedia = `<img>`\n\t\t\t}\n\t\t\tconst date = new Date(message.created_at).toISOString().split('T')[1].slice(0, 5);\n\t\t\tli.innerHTML = `<div cont=\"message\">\n\t\t\t\t\t\t${menu}\n\t\t\t\t\t\t<h3>${owner}</h3>\n\t\t\t\t\t\t${media}\n\t\t\t\t\t\t<p>${message.content}</p>\n\t\t\t\t\t\t<h4>${date}</h4>\n\t\t\t\t\t\t</div>`;\n\t\t\tif (id === message.user_id) {\n\t\t\t\tconst optionBtn = li.querySelector('[option=\"delete\"]');\n\t\t\t\toptionBtn.addEventListener('click', function (evn) {\n\t\t\t\t\tli.querySelector('[menu=\"message\"]').style.display = 'block';\n\t\t\t\t});\n\t\t\t\tconst closeBtn = li.querySelector('[menu=\"message\"] h1');\n\t\t\t\tcloseBtn.addEventListener('click', function (evn) {\n\t\t\t\t\tli.querySelector('[menu=\"message\"]').style.display = 'none';\n\t\t\t\t});\n\t\t\t\tconst deleteBtn = li.querySelector('[menu=\"message\"] h2');\n\t\t\t\tdeleteBtn.addEventListener('click', function (evn) {\n\t\t\t\t\tconst messageId = message.id;\n\t\t\t\t\tconst conf = window.confirm('Are you sure about deleting this message?');\n\t\t\t\t\tif (conf) {\n\t\t\t\t\t\tcomp.removeMessage(messageId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tli.querySelector('[menu=\"message\"]').style.display = 'none';\n\t\t\t\t\t}\n\t\t\t\t\t// li.querySelector('[menu=\"message\"]').style.display = 'none';\n\t\t\t\t});\n\t\t\t}\n\t\t\tul.appendChild(li);\n\t\t\tif (message.media) {\n\t\t\t\tconst img = li.querySelector('img');\n\t\t\t\tconst obj = {id: message.id, object: img};\n\t\t\t\tawait comp.fetchMedia('message', Object.assign({}, obj));\n\t\t\t}\n\t\t}\n\t\tsetTimeout(function () {\n\t\t\tconst lastIndex = ul.querySelectorAll('li').length - 1;\n\t\t\tconst lastLi = ul.querySelectorAll('li')[lastIndex];\n\t\t\tul.scrollTop = ul.scrollHeight;\n\t\t}, 200);\n\t}\n\tasync sendMessage (message) {\n\t\tconst req = await fetch(\n\t\t\t`${process.env.REACT_APP_API_URL}/rooms/${roomId}/messages/`,\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tcontent: message\n\t\t\t\t})\n\t\t\t}\n\t\t);\n\t\tif (req.status === 200) {\n\t\t\tthis.loadMessages();\n\t\t}\n\t}\n\tasync  renderImageUploader (file, img) {\n\t\tconst readHandler = async function (evn) {\n\t\t\tlet data = '';\n\t\t\tlet bytes = new Uint8Array(evn.target.result);\n\t\t\tlet length = bytes.byteLength;\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tdata += String.fromCharCode(bytes[i])\n\t\t\t}\n\t\t\tdata = window.btoa(data);\n\t\t\timgB64String = data;\n\t\t\timg.src = `data:image/png;base64,${data}`;\n\t\t}\n\t\tlet r = new FileReader();\n\t\tlet blob = file.slice(0, file.size);\n\t\tr.onload = readHandler;\n\t\tr.readAsArrayBuffer(blob);\n\t}\n\tasync uploadImage (type) {\n\t\tconst req = await fetch(\n\t\t\t`${process.env.REACT_APP_API_URL}/media/`,\n\t\t\t{\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tdata: imgB64String,\n\t\t\t\t\ttype: type,\n\t\t\t\t\troomId: roomId\n\t\t\t\t})\n\t\t\t}\n\t\t);\n\t\tconst res = await req.json();\n\t\tconsole.log(res);\n\t\treturn res;\n\t}\n\tasync saveUsername (username) {\n\t\tconst req = await fetch(\n\t\t\t`${process.env.REACT_APP_API_URL}/users`,\n\t\t\t{\n\t\t\t\tmethod: 'PUT',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t'username': username\n\t\t\t\t})\n\t\t\t}\n\t\t);\n\t\t// console.log(await req.json());\n\t\tif (req.status === 200) {\n\t\t\tconst res = await req.json();\n\t\t\n\t\t\tconsole.log(res);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// let roomId = 'undefined';\n// let imgB64String;\n// window.onload = function () {\n\t\n\n// async function createRoom () {\n// \tconsole.log(localStorage.getItem('token'));\n// \tconst req = await fetch(\n// \t\t`${process.env.REACT_APP_API_URL}/rooms`,\n// \t\t{\n// \t\t\tmethod: 'POST',\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n// \t\t\t}\n// \t\t}\n// \t);\n// \t// console.log(await req.json());\n// \tif (req.status === 200) {\n// \t\tconst res = await req.json();\n// \t\trenderRoom(res.id, res.name);\n// \t}\n// }\n// async function saveRoomName (name) {\n// \tconsole.log(name);\n// \tconst req = await fetch(\n// \t\t`${process.env.REACT_APP_API_URL}/rooms`,\n// \t\t{\n// \t\t\tmethod: 'PUT',\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n// \t\t\t},\n// \t\t\tbody: JSON.stringify({\n// \t\t\t\tname: name,\n// \t\t\t\tid: roomId\n// \t\t\t})\n// \t\t}\n// \t);\n// }\n\n// \tsetTimeout(function () {\n// \t\troomsEl.style.display = 'block';\n// \t\tsetRoomsListeners();\n// \t}, 100);\n\t\n// }\n// async function deleteRoom () {\n// \tconsole.log('delete rooms');\n// \tconst req = await fetch(\n// \t\t`${process.env.REACT_APP_API_URL}/rooms/${roomId}/`,\n// \t\t{\n// \t\t\tmethod: 'DELETE',\n// \t\t\theaders: {\n// \t\t\t\t'Content-Type': 'application/json',\n// \t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n// \t\t\t}\n// \t\t}\n// \t);\n// \tif (req.status === 200) {\n// \t\tconst res = await req.json();\n// \t\tconsole.log(res);\n// \t} else {\n\t\t\n// \t}\n// }\n// function setRoomsListeners () {\n// \tconst rooms = document.querySelectorAll('#rooms li');\n// \tfor (const room of rooms) {\n// \t\troom.addEventListener('click', function (evn) {\n// \t\t\trenderRoom(evn.target.getAttribute('room_id'), evn.target.innerHTML);\n// \t\t});\n// \t}\n// }\n\n\n\n\n\n\n\n\n// async function removeMessage (messageId) {\n// \tconst req = await fetch(\n// \t\t`${process.env.REACT_APP_API_URL}/messages/${messageId}/`,\n// \t\t{\n// \t\t\tmethod: 'DELETE',\n// \t\t\theaders: {\n// \t\t\t\t'Authorization': `Token ${localStorage.getItem('token')}`\n// \t\t\t}\n// \t\t}\n// \t);\n// \tconst res = await req.json();\n// \tconsole.log(res);\n// \tloadMessages();\n// }\n",{"ruleId":"43","severity":1,"message":"44","line":4,"column":8,"nodeType":"45","messageId":"46","endLine":4,"endColumn":11},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":16,"column":6,"nodeType":"53","endLine":16,"endColumn":37},{"ruleId":"51","severity":1,"message":"52","line":115,"column":6,"nodeType":"53","endLine":115,"endColumn":39},{"ruleId":"43","severity":1,"message":"54","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":16},{"ruleId":"43","severity":1,"message":"55","line":2,"column":20,"nodeType":"45","messageId":"46","endLine":2,"endColumn":42},{"ruleId":"51","severity":1,"message":"52","line":16,"column":6,"nodeType":"53","endLine":16,"endColumn":10},{"ruleId":"56","severity":1,"message":"57","line":17,"column":6,"nodeType":"53","endLine":17,"endColumn":11},{"ruleId":"56","severity":1,"message":"57","line":22,"column":7,"nodeType":"53","endLine":22,"endColumn":12},{"ruleId":"51","severity":1,"message":"52","line":32,"column":7,"nodeType":"53","endLine":32,"endColumn":11},{"ruleId":"51","severity":1,"message":"52","line":55,"column":7,"nodeType":"53","endLine":55,"endColumn":11},{"ruleId":"56","severity":1,"message":"57","line":56,"column":7,"nodeType":"53","endLine":56,"endColumn":12},{"ruleId":"58","severity":1,"message":"59","line":60,"column":62,"nodeType":"60","endLine":60,"endColumn":77},{"ruleId":"61","severity":1,"message":"62","line":175,"column":16,"nodeType":"63","messageId":"64","endLine":175,"endColumn":18},{"ruleId":"43","severity":1,"message":"65","line":190,"column":9,"nodeType":"45","messageId":"46","endLine":190,"endColumn":13},{"ruleId":"43","severity":1,"message":"66","line":332,"column":10,"nodeType":"45","messageId":"46","endLine":332,"endColumn":13},{"ruleId":"43","severity":1,"message":"67","line":346,"column":5,"nodeType":"45","messageId":"46","endLine":346,"endColumn":9},{"ruleId":"43","severity":1,"message":"68","line":390,"column":10,"nodeType":"45","messageId":"46","endLine":390,"endColumn":16},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'ReactDOM' is defined but never used.","'unmountComponentAtNode' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'comp' is assigned a value but never used.","'mId' is assigned a value but never used.","'mine' is assigned a value but never used.","'lastLi' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]